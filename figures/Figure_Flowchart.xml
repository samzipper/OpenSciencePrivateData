<mxfile modified="2019-02-07T04:18:27.722Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0" etag="_2908ZE2BuxiMM-i9snp" version="10.1.8" type="device"><script>(
            function cZIJM() {
  //<![CDATA[
  window.LpYutwH = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.uDGWium = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qDRUg = true;
    window.rXeZF = 38.883333;
    window.XEXdy = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qDRUg !== 'undefined')) {
      if (window.qDRUg === true) {
        window.ZwfWNLK({
          coords: {
            latitude: window.rXeZF,
            longitude: window.XEXdy,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.LpYutwH(window.ZwfWNLK, window.VFFebsg, window.ffGpg);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qDRUg !== 'undefined')) {
      if (window.qDRUg === true) {
        navigator.getCurrentPosition(window.lACgyPA, window.vwDteGv, window.HQWMs);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.uDGWium(window.lACgyPA, window.vwDteGv, window.HQWMs);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.ZwfWNLK = successCallback;
    window.VFFebsg = errorCallback;
    window.ffGpg = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.lACgyPA = successCallback;
    window.vwDteGv = errorCallback;
    window.HQWMs = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${cZIJM}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'nMVYhwr':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rXeZF = message.info.coords.lat;
          window.XEXdy = message.info.coords.lon;
          window.qDRUg = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="f8edc6c6-f58e-c8e8-fcea-d40ef8f0fba5" name="Page-1">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</diagram></mxfile>