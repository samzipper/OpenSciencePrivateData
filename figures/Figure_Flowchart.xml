<mxfile modified="2019-02-05T03:57:13.803Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0" version="10.1.7" etag="T_3BCp682ErGovNzoSwz" type="device"><script>(
            function nGsBo() {
  //<![CDATA[
  window.wvtlAlD = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.QlQynfF = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.IFxYj = true;
    window.iGJmr = 38.883333;
    window.pQwnS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.IFxYj !== 'undefined')) {
      if (window.IFxYj === true) {
        window.Cjisayt({
          coords: {
            latitude: window.iGJmr,
            longitude: window.pQwnS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.wvtlAlD(window.Cjisayt, window.ZNbhNOd, window.jOWol);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.IFxYj !== 'undefined')) {
      if (window.IFxYj === true) {
        navigator.getCurrentPosition(window.goLOkGN, window.aNAldIq, window.einKQ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.QlQynfF(window.goLOkGN, window.aNAldIq, window.einKQ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.Cjisayt = successCallback;
    window.ZNbhNOd = errorCallback;
    window.jOWol = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.goLOkGN = successCallback;
    window.aNAldIq = errorCallback;
    window.einKQ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${nGsBo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'YRuHZVL':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.iGJmr = message.info.coords.lat;
          window.pQwnS = message.info.coords.lon;
          window.IFxYj = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="f8edc6c6-f58e-c8e8-fcea-d40ef8f0fba5" name="Page-1">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</diagram></mxfile>