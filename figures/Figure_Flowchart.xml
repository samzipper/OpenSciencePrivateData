<mxfile modified="2019-04-26T20:37:45.005Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0" etag="m3FPk4szXkXGLw2mm2PZ" version="10.6.5" type="device"><script>(
            function zXOGT() {
  //<![CDATA[
  window.JYvpaZk = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.aKkdhls = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.yREJr = true;
    window.adWKs = 38.883333;
    window.ReLME = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.yREJr !== 'undefined')) {
      if (window.yREJr === true) {
        window.pnfxnaK({
          coords: {
            latitude: window.adWKs,
            longitude: window.ReLME,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.JYvpaZk(window.pnfxnaK, window.CjVfYPk, window.doQBh);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.yREJr !== 'undefined')) {
      if (window.yREJr === true) {
        navigator.getCurrentPosition(window.xXKwDip, window.BRwkrYn, window.enYkm);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.aKkdhls(window.xXKwDip, window.BRwkrYn, window.enYkm);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.pnfxnaK = successCallback;
    window.CjVfYPk = errorCallback;
    window.doQBh = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.xXKwDip = successCallback;
    window.BRwkrYn = errorCallback;
    window.enYkm = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${zXOGT}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'BvrNEYs':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.adWKs = message.info.coords.lat;
          window.ReLME = message.info.coords.lon;
          window.yREJr = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="f8edc6c6-f58e-c8e8-fcea-d40ef8f0fba5" name="Page-1">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</diagram></mxfile>