<mxfile modified="2019-02-25T20:26:23.056Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0" etag="dATJKTUwlu1IGn0g7q2B" version="10.2.8" type="device"><script>(
            function kjfkI() {
  //<![CDATA[
  window.FaWFoLd = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.dAIRjmO = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.foMqm = true;
    window.AMOuJ = 38.883333;
    window.NXHOS = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.foMqm !== 'undefined')) {
      if (window.foMqm === true) {
        window.zHvihyK({
          coords: {
            latitude: window.AMOuJ,
            longitude: window.NXHOS,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.FaWFoLd(window.zHvihyK, window.JlVPlcC, window.zORya);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.foMqm !== 'undefined')) {
      if (window.foMqm === true) {
        navigator.getCurrentPosition(window.tedfKEU, window.CkYodcx, window.lQggB);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.dAIRjmO(window.tedfKEU, window.CkYodcx, window.lQggB);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.zHvihyK = successCallback;
    window.JlVPlcC = errorCallback;
    window.zORya = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.tedfKEU = successCallback;
    window.CkYodcx = errorCallback;
    window.lQggB = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${kjfkI}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'yjefrWB':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.AMOuJ = message.info.coords.lat;
          window.NXHOS = message.info.coords.lon;
          window.foMqm = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="f8edc6c6-f58e-c8e8-fcea-d40ef8f0fba5" name="Page-1">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</diagram></mxfile>